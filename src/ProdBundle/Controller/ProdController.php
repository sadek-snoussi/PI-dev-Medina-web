<?php

namespace ProdBundle\Controller;

use Symfony\Component\HttpFoundation\Response;
use UserBundle\Entity\Categorie;
use UserBundle\Entity\Produit;
use UserBundle\Entity\User;
use ProdBundle\Form\GestionStockType;
use ProdBundle\Form\PriceProdSelectType;
use ProdBundle\Form\ProduitType;
use ProdBundle\Form\RechercheProdType;
use ProdBundle\Form\UpdateProdType;
//use ProdBundle\ProdBundle;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Validator\Constraints\Date;
use Symfony\Component\Validator\Constraints\DateTime;

class ProdController extends Controller
{


    //********************************************CRUD PRODUIT***********************************************
    //*******************************************************************************************************


    public function AjoutProduitAction(\Symfony\Component\HttpFoundation\Request $request)
    {
        $session = $this->get('session');

        $em = $this->getDoctrine()->getManager();

        $user=$this->getUser();

        $prod = new Produit();

        $prod->setIduser($user);
        $prod->setDateexpoproduit(new \DateTime('now'));
        $prod->setValiditeProduit(0);


        $form = $this->createForm(UpdateProdType::class, $prod);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            /**
             * @var UploadedFile $file
             */

            $file = $prod->getUrlimgproduit();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            $file->move(
                $this->getParameter('ImgProd_directory'),
                $fileName
            );

            $prod->setUrlimgproduit($fileName);


            $em->persist($prod, $form->getData());
            $em->flush();

            $session->getFlashBag()->add('success', 'Produit ajouté avec succés.');


            return $this->redirectToRoute("MesProduits");




        }


        return $this->render('@Prod/Partenaire/ajoutProduit.html.twig',array('form' => $form->createView()));

    }


        private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


    public function UpdateProdAction($id,Request $request){

        $session = $this->get('session');

        $em = $this->getDoctrine()->getManager();
        $prod = $em->getRepository("UserBundle:Produit")->find($id);
        $prod->setValiditeProduit(0);

        $Form = $this->createForm(ProduitType::class, $prod);
        $Form->handleRequest($request);


        if ($Form->isValid()) {
            $em->persist($prod);
            $em->flush();

            $session->getFlashBag()->add('success', 'Produit edité avec succés.');


            return $this->redirectToRoute('MesProduits');
        }
        return $this->render("@Prod/Partenaire/UpDateProd.html.twig", array('form' => $Form->createView()));



    }






    public function SupprimerProduitAction($id)
    {

        $session = $this->get('session');

        $em = $this->getDoctrine()->getManager();
        $produit = $em->getRepository('UserBundle:Produit')->find($id);
        $em->remove($produit);
        $em->flush();

        $session->getFlashBag()->add('success', 'Produit supprimé avec succés.');

        return $this->redirectToRoute('MesProduits');

    }


    //*******************************************************************************************************
    //*******************************************************************************************************



    public function MesProduitsAction()
    {
        $em=$this->getDoctrine()->getManager();

        $produits=$em->getRepository('UserBundle:Produit')->findAll();


        return $this->render("@Prod/Partenaire/selectAll.html.twig", array("produits" => $produits));

    }





    public function selectAllClientAction(Request $request)
    {
        $em=$this->getDoctrine()->getManager();



        $categories=$em->getRepository('UserBundle:Categorie')->findAll();
        $produits=$em->getRepository(Produit::class)->findBy(array('validiteProduit'=>'2'));

        $prod=new Produit();

        $Form = $this->createForm(RechercheProdType::class,$prod );
        $Form->handleRequest($request);

        $PriceForm=$this->createForm(PriceProdSelectType::class);
        $PriceForm->handleRequest($request);


        $mini=$PriceForm["mini"]->getData();
        $maxi=$PriceForm["maxi"]->getData();



        if ($PriceForm->isValid()){
            $produits=$em->getRepository('UserBundle:Produit')->findByPriceDQL($mini,$maxi);
        }


        if ($Form->isValid()){
            $produits=$em->getRepository('UserBundle:Produit')->findMultDQL($prod->getNomproduit());
        }

        return $this->render("@Prod/Products/selectAllClient.html.twig", array('produits' => $produits,
            'categories'=>$categories,
            'form' => $Form->createView(),
            'form2' => $PriceForm->createView())
            );

    }







    //********************************************VALIDER PRODUITS*******************************************
    //*******************************************************************************************************


    public function ValiderProdAction(Request $request){

        $em=$this->getDoctrine()->getManager();

        $invalides=$em->getRepository('UserBundle:Produit')->findBy(array('validiteProduit'=>'0'));
        return $this->render('@Prod/Admin/nonValid.html.twig',array('invalides' =>$invalides));

    }

    public function accepterProdAction(Request $request,$id){

        $session = $this->get('session');

        $em=$this->getDoctrine()->getManager();

        $produit = $em->getRepository('UserBundle:Produit')->find($id);
        $produit->setValiditeProduit(2);
        $em->flush();

        $session->getFlashBag()->add('success', 'le produit '.$produit->getNomproduit().' a été validé avec succés.');


        return $this->redirectToRoute('ValiderProduit');

    }

    public function refuserProduitAction($id)
    {
        $em = $this->getDoctrine()->getManager();
        $produit = $em->getRepository('UserBundle:Produit')->find($id);
        $produit->setValiditeProduit(1);
        $em->flush();

        return $this->redirectToRoute('ValiderProduit');

    }






    //*******************************************GESTION DE STOCK********************************************
    //*******************************************************************************************************

    public function gestionStockAction(Request $request)
    {


        $em = $this->getDoctrine()->getManager();

        $produits = $em->getRepository('UserBundle:Produit')->findBy(array('validiteProduit' => '2'));


        return $this->render('@Prod/Partenaire/gererStock.html.twig', array('produits' => $produits));


    }

    public function  UpDateStockAction($id,Request $request){

        $em = $this->getDoctrine()->getManager();

        $produits = $em->getRepository('UserBundle:Produit')->findBy(array('validiteProduit' => '1'));

        $prod=$em->getRepository('UserBundle:Produit')->find($id);


        $Form = $this->createForm(GestionStockType::class, $prod);
        $Form->handleRequest($request);

        if ($Form->isValid()) {
            $em->persist($prod);
            $em->flush();

            return $this->redirectToRoute('gererStock');
        }


        return $this->render('@Prod/Partenaire/updateStock.html.twig', array('form' => $Form->createView(),
            'prod'=>$prod));

    }


    public function gererPdfAction(Request $request,$id)
    {
        $em = $this->getDoctrine()->getManager();
        $produit=$em->getRepository('UserBundle:Produit')->findby(array('iduser'=>$id));
        $snappy = $this->get('knp_snappy.pdf');
        $html= $this->render('ProdBundle:Partenaire:ImprimerPdf.html.twig',array('produits'=>$produit,'id'=>$id));
        $filename = 'Produit';
        return new Response(
            $snappy->getOutputFromHtml($html),
            200,
            array(
                'Content-Type'          => 'application/pdf',
                'Content-Disposition'   => 'attachment; filename="'.$filename.'.pdf"'
            )
        );

    }







    //******************************l'affichage des produits sur l'onglet Produits************************************
//*********************************************************************************************************************




    public function selectCategorieAction(Request $request,$id)
    {
        $em=$this->getDoctrine()->getManager();
        $categories=$em->getRepository('UserBundle:Categorie')->findAll();


        $produits=$em->getRepository('UserBundle:Produit')->findBy(array('idcategorie'=>$id,'validiteProduit'=>2));

        $prod=new Produit();
        $Form = $this->createForm(RechercheProdType::class,$prod );
        $Form->handleRequest($request);

        $PriceForm=$this->createForm(PriceProdSelectType::class);
        $PriceForm->handleRequest($request);


        $mini=$PriceForm["mini"]->getData();
        $maxi=$PriceForm["maxi"]->getData();



        if ($PriceForm->isValid()){
            $produits=$em->getRepository('UserBundle:Produit')->findByPriceDQL($mini,$maxi);
        }

        if ($Form->isValid()){
            $produits=$em->getRepository('UserBundle:Produit')->findMultDQL($prod->getNomproduit());
        }


        return $this->render("@Prod/Products/selectCategories.html.twig", array("produits" => $produits,
            'categories'=>$categories,
            'form' => $Form->createView(),
            'form2' => $PriceForm->createView()
        ));

    }



    //*********************************************************************************************************************
    //******************************l'affichage des produits sur l'onglet Produits************************************



























}
