<?php

namespace SocialBundle\Controller;
use SocialBundle\Form\ModifVideoType;
use SocialBundle\Form\RatingType;
use SocialBundle\Form\VideoType;
use SocialBundle\Form\RechercheType;
use SocialBundle\Form\CommentType;
use SocialBundle\SocialBundle;
use UserBundle\Entity\Rating;
use UserBundle\Entity\Tags;
use UserBundle\Entity\User;
use UserBundle\Entity\Videodiy;
use UserBundle\Entity\Commentaire;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use IndexBundle;
use UserBundle\UserBundle;


class VideoController extends Controller
{
    public function addAction(Request $request)
    {
        $video = new Videodiy();
        $user = $this->getUser();
        $video= $video->setIduser($user);
        $video->setValid(0);
        $video=  $video->setDateexpovideo(new \DateTime('now'));
        $session = $this->get('session');
        $em = $this->getDoctrine()->getManager();

        $form = $this->createForm(VideoType::class, $video);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // $file stores the uploaded PDF file

            /**
             * @var Symfony\Component\HttpFoundation\File\UploadedFile $file
             */

            $file = $video->getVideo();


            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();


            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('video_directory'),
                $fileName
            );

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $video->setVideo($fileName);

            // ... persist the $product variable or any other work

            $em->persist($video,$form->getData());
            $em->flush();
            $session->getFlashBag()->add('success', 'Video ajoutée avec succès');

            return $this->redirectToRoute("afficher");

        }

        return $this->render('@Social/Partenaire/ajouterVideo.html.twig', array(
            'form' => $form->createView(),
        ));
    }
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


    public function showAction() {
        $em = $this->getDoctrine()->getManager();

        $user = $this->getUser();


        $videos = $em->getRepository("UserBundle:Videodiy")->findBy(array('iduser'=>$user));


        return $this->render('@Social/Partenaire/afficherVideo.html.twig', array(
            'videos'=> $videos,
        ));
    }
    public function showClientAction(Request $request) {

        $em = $this->getDoctrine()->getManager();
        $videos = $em->getRepository("UserBundle:Videodiy")->findBy(array('valid' => 1));
        $user = $this->getUser();
        $tag= new Tags();
        $tag->setUser($user);
        //recherche_video
        $video =new Videodiy();
        $Form= $this->createForm(RechercheType::class, $video);
        $Form->handleRequest($request);
        if($Form->isSubmitted()){
            $videos=$em->getRepository("UserBundle:Videodiy")->findMultDQL($video->getTags());
            $userTag = $Form["tags"]->getData();
            $tag->setTag($userTag);
            $em->persist($tag);
            $em->flush();
        }
        return $this->render("@Social/client/afficherVideoClient.html.twig", array(
            'Form'=>$Form->createView(),
            'videos'=>$videos,
        ));

    }

    public function showDetailsVideoAction($id,Request $request) {

        $x = $this->getDoctrine()->getManager();
        $video = $x->getRepository(Videodiy::class)->find($id);
        $user = $this->getUser();

        $newRating= new Rating();
        $newRating->setUser($user);
        $newRating->setVideo($video);


        //Retrieves old newRating(s)
        $retrievedRatingResult=$x->getRepository("UserBundle:Rating")->findOneBy(array('video'=>$video,'user'=>$user));



            if ( $retrievedRatingResult != null)
            {

                $ratingform = $this->createForm(RatingType::class, $retrievedRatingResult);
                $ratingform->handleRequest($request);
                if ($ratingform->isSubmitted()) {
                    if($this->getUser() == null){
                      return $this->redirectToRoute("fos_user_security_login");
                    }
                    else{
                        $retrievedRatingResult->setRating($ratingform->get('rating')->getData());
                        $x->persist($retrievedRatingResult);
                        $x->flush();
                    }

                }
            }else
            {
                $ratingform= $this->createForm(RatingType::class, $newRating);
                $ratingform->handleRequest($request);
                if ($ratingform->isSubmitted()) {

                    if($this->getUser() == null){
                        return $this->redirectToRoute("fos_user_security_login");
                    }
                    else{
                        $newRating->setRating($ratingform->get('rating')->getData());
                        $x->persist($newRating);
                        $x->flush();
                    }

                }

            }




         $video->setAvgRating($x->getRepository("UserBundle:Rating")->averageRatingDQL($id));
        $x->persist($video);
        $x->flush();

// TODO : Add comments section
       /* $commentaire =new Commentaire();
        $user = $this->getUser();

        $commentaire->setIduser($user);
        $commentaire->setIdvideo($video);

        $form= $this->createForm(CommentType::class, $commentaire);
        $form->handleRequest($request);

        if ($form->isValid()){
            $em=$this->getDoctrine()->getManager();
            $em->persist($commentaire);
            $em->flush();
        }
        $commentaires=$x->getRepository("UserBundle:Commentaire")->findAll();*/

        return $this->render('@Social/client/DetailVideo.html.twig', array(
            'video'=> $video,
            'retrievedRatingResult'=>$retrievedRatingResult,
            'ratingform' => $ratingform->createView(),
           // 'commentaires' => $commentaires,
            // 'form' => $form->createView(),





        ));

    }

    /*public function listeCommentaireAction()
    {

        $em = $this->getDoctrine()->getManager();

        $commentaires = $em->getRepository("UserBundle:Commentaire")->findAll();

        return $this->render('@Social/client/DetailVideo.html.twig', array(
            'commentaires' => $commentaires,
        ));
    }*/
    public function deleteAction($id)
    {
        $em = $this->getDoctrine()->getManager();
        $session = $this->get('session');

        $video = $em->getRepository(Videodiy::class)->find($id);

        $em->remove($video);
        $em->flush();
        $session->getFlashBag()->add('success', 'Votre vidéo a été supprimée avec succès');

        return $this->redirectToRoute("afficher");
    }



    public function updateAction($id, Request $request)
    {
        $em=$this->getDoctrine()->getManager();
        $video=$em->getRepository("UserBundle:Videodiy")->find($id);
        $session = $this->get('session');

        $Form= $this->createForm(ModifVideoType::class, $video);
        $Form->handleRequest($request);

        if ($Form->isSubmitted()){
            $em->persist($video);
            $em->flush();
            $session->getFlashBag()->add('success', 'Vos modifications ont été enregistrées ');

            return $this->redirectToRoute('afficher');
        }
        return $this->render("@Social/Partenaire/updateVideo.html.twig", array('form' => $Form->createView()));

    }

    public function validationVideoAction(){
       $em=$this->getDoctrine()->getManager();

       $videos= $em->getRepository("UserBundle:Videodiy")->findBy(array('valid'=> 0));

        return $this->render("@Social/admin/validVideo.html.twig", array('videos'=>$videos));
    }
    public function validationAction($id)
    {
        $em = $this->getDoctrine()->getManager();
        $session = $this->get('session');
        $video = $em->getRepository("UserBundle:Videodiy")->find($id);
        $video->setValid(1);
        $em->flush($video);
        $session->getFlashBag()->add('success', 'Video validée ');

        $videos= $em->getRepository("UserBundle:Videodiy")->findBy(array('valid'=>0));

        return $this->render("@Social/admin/validVideo.html.twig", array('videos'=>$videos));

    }
    public function rejeterAction($id)
    {
        $em = $this->getDoctrine()->getManager();
        $session = $this->get('session');

        $video = $em->getRepository(Videodiy::class)->find($id);

        $video->setValid(2);
        $em->flush($video);
        $session->getFlashBag()->add('success', 'Video rejetée');
        $videos= $em->getRepository("UserBundle:Videodiy")->findBy(array('valid'=>0));
        return $this->render("@Social/admin/validVideo.html.twig", array('videos'=>$videos));
    }







}

