<?php
/**
 * Created by PhpStorm.
 * User: amalb
 * Date: 12/02/2018
 * Time: 18:41
 */

namespace PartenaireBundle\Controller;


use PartenaireBundle\Form\FreelancerType;
use UserBundle\Entity\User;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\File\UploadedFile;




class FreelancerController extends Controller
{
    public function AjoutFreelancerAction(Request $request,$userid)
    {
        $em=$this->getDoctrine()->getManager();
        //$userid=$request->get('iduser');
        $user=$em->getRepository("UserBundle:User")->find($userid);

        $Form=$this->createForm(FreelancerType::class,$user);
        $Form->handleRequest($request);
        if ($Form->isValid()&&$Form->isSubmitted()) {
            // $file stores the uploaded PDF file

            /**
             * @var UploadedFile $file
             */

            $file = $user->getUrlphotofree();
            $fileName = $this->generateUniqueFileName().'.'.$file
                    ->guessExtension();
            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('logo_directory'),
                $fileName
            );

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $user->setUrllogopro($fileName);

            // ... persist the $product variable or any other work


            $em = $this->getDoctrine()->getManager();
            $user->setTypeuser('freelancer');

            $user->setPartenariat(0);
            $em->persist($user);
            $em->flush();

            return $this->redirectToRoute('Page_part');

        }
        return $this->render('PartenaireBundle:Partenaire:Ajoutfreelancer.html.twig', array('form'=>$Form->createView()));



    }
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function modifierProfileFreeAction(Request $request)
    {
        $em = $this->getDoctrine()->getManager();
        $iduser=$this->getUser();
        $user = $em->getRepository("UserBundle:User")->find($iduser);
        if ($request->isMethod('post')) {

            $user->setNomuser($request->get('nom'));
            $user->setPrenomuser($request->get('prenom'));
            $user->setTelbureaupro($request->get('numero'));
            $user->setEmail($request->get('email'));
            $user->setSpecialitepart($request->get('specialite'));
            $em = $this->getDoctrine()->getManager();
            $em->persist($user);
            $em->flush();
            return $this->redirectToRoute('Page_part');

        }
        return $this->render('PartenaireBundle:Partenaire:ProfileFree.html.twig',array("user" => $user));



    }

    public function deleteProAction($id)
    {

        $em = $this->getDoctrine()->getManager();
        $user = $em->getRepository("PartenaireBundle:User")->find($id);
        $em->remove($user);
        $em->flush();
        return $this->redirectToRoute('partenaire_homepage2');
    }





}