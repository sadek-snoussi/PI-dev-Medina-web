<?php
/**
 * Created by PhpStorm.
 * User: ASUS I7
 * Date: 17/02/2018
 * Time: 20:28
 */

namespace EventBundle\Controller;
use EventBundle\Form\evenementType;
use EventBundle\Form\RechercheEvent;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use UserBundle\Entity\Event;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;


use EventBundle\Entity\Mail;




class EventController extends  Controller
{
    public function ajouterAction(Request $request)
    {
        $em = $this->getDoctrine()->getManager();
        $event = new Event();
        if ($request->isMethod('POST')) {



            $event->setNomevent($request->get('nomEvent'));
            $event->setDescriptionevent($request->get('description'));
            $event->setDateevent($request->get('dateEvent'));
            $event->setObjectifevent($request->get('objectif'));
            $event->setNbrestand($request->get('nbrstand'));
            $event->setLieux(($request->get('lieux')));
            $event->setNbrePlace($request->get('nbplaces'));
            $event->setTypeEvent($request->get('typeEvent'));
            $em = $this->getDoctrine()->getManager();


            $em->persist($event);

            $em->flush();
            return $this->redirectToRoute('affiche2');
        }

        return $this->render('EventBundle:EvenementAdmin:ajoutEvent.html.twig', array());
    }






    public function modifierAction($id, Request $request)
    {
        $em = $this->getDoctrine()->getManager();

        $event = $em->getRepository("UserBundle:Event")->find($id);
        //$this->render('EspritParcBundle:Model:modifier.html.twig',array("model"=>$model));


        if ($request->isMethod('Post')) {

            $event->setNomevent($request->get('nomevent'));
           // $event->setDateevent($request->get('dateevent'));
            $event->setLieux($request->get('lieux'));
            $event->setNbreplace($request->get('nbreplace'));

            $em = $this->getDoctrine()->getManager();
            $em->persist($event);
            $em->flush();
            return $this->redirectToRoute('affiche2');
        }
        return $this->render('EventBundle:EvenementAdmin:modifier.html.twig', array("event" => $event));
    }



    public function affAction()
    {
        $em = $this->getDoctrine()->getManager();
        $events = $em->getRepository("UserBundle:Event")->findByDAteEventQB();


        return $this->render('EventBundle:EvenementAdmin:affiche.html.twig', array("events" => $events));

    }

    public function deleteAction($id)
    {
        $em = $this->getDoctrine()->getManager();
        $Event = $em->getRepository("UserBundle:Event")->find($id);
        $em->remove($Event);
        $em->flush();
        return $this->redirectToRoute('affiche2');
    }


    public function actualiteEventAction(Request $request)

    {
        $em = $this->getDoctrine()->getManager();
        $e=new Event();
        $Form=$this->createForm(RechercheEvent::class,$e);
        $Form->handleRequest($request);
        if($Form->isValid())
        {
            $events=$em->getRepository('UserBundle:Event')->findBy(array('lieux'=>$e->getLieux()));
        }
        else{

            $events = $em->getRepository("UserBundle:Event")->findByDAteEventQB();

        }



        $evenement = $this->get('knp_paginator')->paginate(
            $events,
            $request->query->get('page', 1)/*le numéro de la page à afficher*/,
            1/*nbre d'éléments par page*/
        );



        return $this->render('EventBundle:EvenementClient:ActuaiteEvent.html.twig', array("events" => $evenement,'form'=>$Form->createView()));


    }

    public function AjoutEventformAction(Request $request)
    {
        $event=new Event();
        $Form=$this->createForm(evenementType::class,$event);
        $Form->handleRequest($request);
        if ($Form->isValid())
        {
            /**
             * @var UploadedFile $file
             */

            $file=$event->getUrlafficheevent();
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            $file->move(
                $this->getParameter('images_directory'),
                $fileName
            );

            $event->setUrlafficheevent($fileName);
            $em=$this->getDoctrine()->getManager();
            $em->persist($event,$Form->getData());
            $em->flush();
            return $this->redirectToRoute('affiche2');

        }
        return $this->render('EventBundle:EvenementAdmin:AjouterEventImage.html.twig', array( 'form' => $Form->createView()));


    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


    public function ConsulterAction()
    {
        $em = $this->getDoctrine()->getManager();
        $events = $em->getRepository("UserBundle:Event")->findAll();

        return $this->render('EventBundle:EvenementClient:consulterEvent.html.twig', array("events" => $events));
    }

    public  function EnvoyerMailAction()
    {

        $em = $this->getDoctrine()->getManager();



        $mail=new Mail();
        $transport = \Swift_SmtpTransport::newInstance('smtp.gmail.com', 465, 'ssl')
            ->setAuthMode('login')
            ->setUsername('youthvision.soukmedina@gmail.com')
            ->setPassword('SOUK2018');
        $mailer = \Swift_Mailer::newInstance($transport);
        $mail->setEmail('ons.bentili@gmail.com');

        $mail->setText('Bonjour M/Mme votre demande de partenariat a été validée ,Soyez le bienvenue');
        $message = \Swift_Message::newInstance()
            ->setSubject('Grade')
            ->setFrom('youthvision.soukmedina@gmail.com')
            ->setTo($mail->getEmail())
            ->setBody($mail->getText());
        $this->get('mailer')->send($message);

        return $this->render('EventBundle:EvenementClient:test.html.twig');

    }















}